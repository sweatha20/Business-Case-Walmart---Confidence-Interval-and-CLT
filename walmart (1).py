# -*- coding: utf-8 -*-
"""Walmart

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yXTlVd95cgzwzX-BueoVzgpEQioGXQ8C
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/walmart_data.txt")
df

"""1.Observations on shape of data, data types of all the attributes, conversion of categorical attributes to 'category' (If required), statistical summary"""

df.isnull().sum()

df.describe(include="all")

df.info()

#conversion of categorical attributes to 'category'
columns=['User_ID','Occupation', 'Marital_Status', 'Product_Category']
df[columns]=df[columns].astype('object')

df.dtypes

"""**Initial Observations:**

* There are no missing values in the data.
* The difference between mean and median seems to be significant for purchase
  suggests outliers in the data.
* Few categorical variable are of integer data type. It can be converted to
  character type.
"""

col = ['Gender', 'Age', 'City_Category', 'Stay_In_Current_City_Years', 'Marital_Status']
df[col].melt().groupby(['variable', 'value'])[['value']].count()/len(df)

"""the above table exhibits how categorical variables contributes to the entire data
1. 40% of the purchase done by aged 26-35 and 78% purchase are done by the customers aged between the age 18-45 (40%: 26-35, 18%: 18-25, 20%: 36-45)
2. 75% of the purchase count are done by Male and 25% by Female
3. 60% Single, 40% Married contributes to the purchase count.
4. 35% Staying in the city from 1 year, 18% from 2 years, 17% from 3 years
5. There are 20 product categories in total.
6. There are 20 different types of occupations in the city.
"""

df["User_ID"].nunique()

"""There are 5891 unique users"""

A=df.groupby(['User_ID'])['Gender'].unique()
A.value_counts(normalize=True).mul(100).round(1).astype(str) + '%'

"""* There are 72% male users and 28% female users"""

B=df.groupby(['User_ID'])['Age'].unique()
B.value_counts(normalize=True).mul(100).round(1).astype(str) + '%'

"""*  We can see 35% of the users are aged 26-35. 73% of users are aged between 18-45.
* From the previous observation we saw 40% of the purchase are done by users aged 26-35. And, we have 35% of users aged between 26-35.So, we can infer users aged 26-35 are more frequent  customers.
"""

C=df.groupby(['User_ID'])['Marital_Status'].unique()
C.value_counts(normalize=True).mul(100).round(1).astype(str) + '%'

"""* There are 58% of the single users and 42% of married users and single users contributes to the 60% of the purchase count.

Univariate Analysis:
"""

plt.figure(figsize=(10, 6))
sns.histplot(data=df, x="Purchase", kde=True)
plt.show()

"""Purchase value between 5000 and 10000 have higher count

Missing Value & Outlier Detection
"""

plt.figure(figsize=(5, 4))
sns.boxplot(data=df, y='Purchase')
plt.show()

"""We can see some outliers are seen

For categorical data
"""

fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(15, 10))
sns.countplot(data=df, x='Gender', ax=axs[0,0])
sns.countplot(data=df, x='Occupation', ax=axs[0,1])
sns.countplot(data=df, x='City_Category', ax=axs[1,0])
sns.countplot(data=df, x='Marital_Status', ax=axs[1,1])
plt.show()

"""1. We can clearly see from the graphs above the purchases done by males are much higher than females.
2. We have 21 occupations categories. Occupation category 4, 0, and 7 are with higher number of purchases and category 8 with the lowest number of purchaes.
3. The purchases are highest from City category B.
4. Single customer purchases are higher than married users.

Bivariate
"""

fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(15,9))
sns.histplot(data=df[df['Gender']=='M']['Purchase'], ax=axs[0,0],color="red").set_title("Male-Users Spending ")
sns.histplot(data=df[df['Gender']=='F']['Purchase'],ax=axs[0,1],color="blue").set_title("Female-Users Spending")
sns.histplot(data=df[df['Marital_Status']==0]['Purchase'], ax=axs[1,0],color="purple").set_title("Single-Users Spending ")
sns.histplot(data=df[df['Marital_Status']==1]['Purchase'],ax=axs[1,1],color="green").set_title("Married-Users Spending")

"""* Spending behaviour for males and females as the maximum purchase count are between the purchase value range of 5000-10000 for both but, the purchase count are more in case of males.
* Similarly spending behaviour for married and single users as the maximum purchase count are between the purchase value range of 5000-10000 for both but, the purchase count are more in case of single users.

Correlation between categorical variables:
"""

sns.heatmap(df.corr(), annot=True, cmap="Blues", linewidth=.5)

"""1.Are women spending more money per transaction than men? Why or Why not?"""

avg_gender = df.groupby(['User_ID', 'Gender'])[['Purchase']].sum()
avg_gender = avg_gender.reset_index()
avg_gender.head()

# Gender wise count in the entire data
avg_gender['Gender'].value_counts()

fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(16,5))
sns.histplot(data=avg_gender[avg_gender['Gender']=='M']['Purchase'], ax=axs[0],color="red").set_title("Male-Users Spending ")
sns.histplot(data=avg_gender[avg_gender['Gender']=='F']['Purchase'],ax=axs[1],color="blue").set_title("Female-Users Spending")

"""No womens are mpt spending more money as the Average amount spend by males are higher than females.

2.Confidence intervals and distribution of the mean of the expenses by female and male customers
"""

avg_gender.groupby(['Gender'])[['Purchase']].mean()

"""The average amount spent by Female is 712024 and male is 925344"""

avg_male=avg_gender[avg_gender['Gender']=='M']
avg_female=avg_gender[avg_gender['Gender']=='F']

genders = ["M", "F"]

sample_size = 1000

num_repitions = 1000
male_means = []
female_means = []

for i in range(num_repitions):
    male_mean = avg_male.sample(sample_size, replace=True)['Purchase'].mean()
    female_mean = avg_female.sample(sample_size, replace=True)['Purchase'].mean()

    male_means.append(male_mean)
    female_means.append(female_mean)

fig, axis = plt.subplots(nrows=1, ncols=2, figsize=(20, 6))
axis[0].hist(male_means, bins=35)
axis[1].hist(female_means, bins=35)
axis[0].set_title("Male distribution of means, Sample size: 1000")
axis[1].set_title("Female distribution of means, Sample size: 1000")
plt.show()

"""Mean of sample means of amount spend for Male and female"""

pop_mean_male=np.mean(male_means)

pop_mean_female=np.mean(female_means)

print("Sample avg spend amount for Male:",pop_mean_male)
print("Sample avg spend amount for Female:",pop_mean_female)

"""Std deviation for male and female"""

std_male=pd.Series(male_means).std()

std_female=pd.Series(female_means).std()

print("Sample std error for Male:",std_male)
print("Sample std error for Female:",std_female)

"""Std error for Male and female"""

std_error_male=((std_male)/(np.sqrt(1000)))
std_error_female=((std_female)/(np.sqrt(1000)))

print("Sample std error for Male:",std_error_male)
print("Sample std error for Female:",std_error_male)

"""#Taking the values for z at 95% and 99% confidence interval as:

"""

z95=1.960 #95% Confidence Interval
z99=2.576 #99% Confidence Interval

"""For 95% CI"""

Upper_Limit_male=(z95*std_error_male) + pop_mean_male
Lower_Limit_male=pop_mean_male - (z95*std_error_male)

Upper_Limit_female=(z95*std_error_female) + pop_mean_female
Lower_Limit_female=pop_mean_female - (z95*std_error_female)

print("Male_CI: ",[Lower_Limit_male,Upper_Limit_male])
print("Female_CI: ",[Lower_Limit_female,Upper_Limit_female])

"""Now we can infer about the population that, 95% of the times:
1. Average amount spend by male customer will lie in between: (925745.16, 929552.15)
2. Average amount spend by female customer will lie in between: (710622.86, 713729.61)

For 99% CI
"""

Upper_Limit_male=(z99*std_error_male) + pop_mean_male
Lower_Limit_male=pop_mean_male - (z99*std_error_male)

Upper_Limit_female=(z95*std_error_female) + pop_mean_female
Lower_Limit_female=pop_mean_female - (z99*std_error_female)

print("Male_CI: ",[Lower_Limit_male,Upper_Limit_male])
print("Female_CI: ",[Lower_Limit_female,Upper_Limit_female])

"""Now we can infer about the population that, 99% of the times:
1. Average amount spend by male customer will lie in between: (925146.92, 930150.39)
2. Average amount spend by female customer will lie in between: (710134.66, 713729.61)

**The same activity is performed for Married vs Unmarried **
"""

avg_Marital = df.groupby(['User_ID', 'Marital_Status'])[['Purchase']].sum()
avg_Marital = avg_Marital.reset_index()

avgamt_married = avg_Marital[avg_Marital['Marital_Status']==1]
avgamt_single = avg_Marital[avg_Marital['Marital_Status']==0]

sample_size = 1000
num_repitions = 1000
married_means = []
single_means = []

for i in range(num_repitions):
    avg_married = avg_Marital[avg_Marital['Marital_Status']==1].sample(sample_size, replace=True)['Purchase'].mean()
    avg_single = avg_Marital[avg_Marital['Marital_Status']==0].sample(sample_size, replace=True)['Purchase'].mean()

    married_means.append(avg_married)
    single_means.append(avg_single)

fig, axis = plt.subplots(nrows=1, ncols=2, figsize=(20, 6))

axis[0].hist(married_means, bins=35)
axis[1].hist(single_means, bins=35)
axis[0].set_title("Married distribution of means, Sample size: 1000")
axis[1].set_title("Unmarried distribution of means, Sample size: 1000")

plt.show()

##Std deviation for male and female
print("Sample avg spend amount for Married_means:",np.mean(married_means))
print("Sample avg spend amount for single_means:",np.mean(single_means))

##Std deviation for male and female
print("Sample std for Married:",pd.Series(married_means).std())
print("Sample std for Single:",pd.Series(single_means).std())

##Std error for Male and female
print("Sample std error for Married:",((pd.Series(married_means).std())/(np.sqrt(1000))))
print("Sample std error for Single:",((pd.Series(single_means).std())/(np.sqrt(1000))))

"""Taking the values for z at 95% and 99% confidence interval as:"""

z95=1.960 #95% Confidence Interval
z99=2.576 #99% Confidence Interval

"""for 95%"""

Upper_Limit_married=(z95*pd.Series(married_means).std()) + np.mean(married_means)
Lower_Limit_married=np.mean(married_means) -(z95*pd.Series(married_means).std())

Upper_Limit_single=(z95*pd.Series(single_means).std()) + np.mean(single_means)
Lower_Limit_single=np.mean(single_means) - (z95*pd.Series(single_means).std())

print("Married_CI: ",[Lower_Limit_married,Upper_Limit_married])
print("Single_CI: ",[Lower_Limit_single,Upper_Limit_single])

"""For 99%"""

Upper_Limit_married=(z99*pd.Series(married_means).std()) + np.mean(married_means)
Lower_Limit_married=np.mean(married_means) -(z99*pd.Series(married_means).std())

Upper_Limit_single=(z99*pd.Series(single_means).std()) + np.mean(single_means)
Lower_Limit_single=np.mean(single_means) - (z99*pd.Series(single_means).std())

print("Married_CI: ",[Lower_Limit_married,Upper_Limit_married])
print("Single_CI: ",[Lower_Limit_single,Upper_Limit_single])

"""For married and singles greater confidence interval, the range increases.

Recommendations
1. Men spent more money than women, So company should focus on retaining the male
customers and getting more male customers.
2. Product_Category - 1, 5, 8, & 11 have highest purchasing frequency. it means these
are the products in these categories are liked more by customers. Company can focus on
selling more of these products or selling more of the products which are purchased less.
3. Unmarried customers spend more money than married customers, So company should
focus on acquisition of Unmarried customers.
4. Customers in the age 18-45 spend more money than the others, So company should
focus on acquisition of customers who are in the age 18-45
5. Male customers living in City_Category C spend more money than other male customers
living in B or C, Selling more products in the City_Category C will help the company
increase the revenue.
"""







